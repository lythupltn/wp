<?php
/**
 *
 * @link       laserwp.com/contact
 * @since      1.0.0
 * @package    core
 * @subpackage core/
 * @author     Laser WordPress Team <contact@laserwp.com>
 */

namespace Lwwb\Admin\Dashboard;

use Lwwb\Admin\Base\Base_Admin_Controller;
use Lwwb\Admin\Base\Callback_Manager;

class Dashboard_Controller extends Base_Admin_Controller {

	public $settings;

	public $callbacks;

	public function register() {
		$this->callbacks = new Callback_Manager();
		parent::register(); // TODO: Change the autogenerated stub
		add_action( 'wp_ajax_system_info_download_file', array( $this, 'download_file' ) );
	}

	public function get_page() {
		if ( isset(wp_get_current_user()->roles[0]) && 'administrator' !== wp_get_current_user()->roles[0] ) {
			return;
		}

		return array(
			'page_title' => esc_html__( 'Laser', 'lwwb' ),
			'menu_title' => esc_html__( 'Laser', 'lwwb' ),
			'capability' => $this->capability,
			'menu_slug'  => $this->plugin_prefix,
			'callback'   => array( $this, 'admin_dashboard' ),
			'icon_url'   => $this->plugin_url . 'assets/admin/dashboard/admin.png',
			'position'   => 110
		);
	}

	public function get_sub_page() {
		if ( isset(wp_get_current_user()->roles[0]) && 'administrator' !== wp_get_current_user()->roles[0] ) {
			return;
		}

		return array(
			'parent_slug' => $this->plugin_prefix,
			'page_title'  => esc_html__( 'Dashboard', 'lwwb' ),
			'menu_title'  => esc_html__( 'Dashboard', 'lwwb' ),
			'capability'  => $this->capability,
			'menu_slug'   => $this->plugin_prefix,
			'callback'    => array( $this, 'admin_dashboard' )
		);
	}

	public function admin_dashboard() {
		return require_once $this->plugin_path . "inc/Admin/templates/dashboard.php";
	}

	public function get_settings() {
		$args = array(
			array(
				'option_group' => 'lwwb_integrations_general',
				'option_name'  => 'lwwb_settings',
				'callback'     => array( $this->callbacks, 'options_sanitize' )
			)
		);

		return $args;
	}

	public function get_sections() {
		$args = array(
			array(
				'id'    => 'lwwb_integrations_section',
				'title' => esc_html__( '', 'lwwb' ),
				'page'  => 'lwwb'
			)
		);

		return $args;
	}

	public function get_fields() {
		$args = array(
			array(
				'id'       => 'google_map_key',
				'title'    => 'Google Map API Key',
				'callback' => array( $this->callbacks, 'textbox_field' ),
				'page'     => 'lwwb',
				'section'  => 'lwwb_integrations_section',
				'args'     => array(
					'label_for'   => 'google_map_key',
					'option_name' => 'lwwb_settings',
					'option_slug' => 'integrations',
					'description' => esc_html__( 'Enter your Google Map API key. ', 'lwwb' ) . '<a href="' . esc_url( 'https://developers.google.com/maps/documentation/javascript/get-api-key' ) . '" target="_blank">' . esc_html__( 'How to get?', 'lwwb' ) . '</a>'
				)
			),
			array(
				'id'       => 'facebook_app_id',
				'title'    => 'Facebook App ID',
				'callback' => array( $this->callbacks, 'textbox_field' ),
				'page'     => 'lwwb',
				'section'  => 'lwwb_integrations_section',
				'args'     => array(
					'label_for'   => 'facebook_app_id',
					'option_name' => 'lwwb_settings',
					'option_slug' => 'integrations',
					'description' => esc_html__( 'Facebook SDK lets you connect to your ', 'lwwb' ) . '<a href="' . esc_url( 'https://developers.facebook.com/docs/apps/register/' ) . '" target="_blank">' . esc_html__( 'dedicated application ', 'lwwb' ) .
					                 '</a>' . esc_html__( 'so you can track the Facebook Element analytics on your site.', 'lwwb' ) . '<br>
									 ' . esc_html__( "Note that this option will not work on local sites and on domains that don't have public access.", 'lwwb' ) . '<br>'
					                 . esc_html__( 'Note Remember to add the domain to your ', 'lwwb' ) . '<a href="' . esc_url( 'https://developers.facebook.com/apps/' ) . '" target="_blank">' . esc_html__( 'App Domains', 'lwwb' ) . '<a/>',

				)
			)
		);

		return $args;
	}


	/**
	 * Download File
	 */
	public function download_file() {
		if ( ! current_user_can( $this->capability ) ) {
			wp_die( __( 'You don\'t have a permission to download this file', 'lwwb' ) );
		}

		$name = sanitize_title_with_dashes( get_bloginfo( 'name' ), '', 'save' );
		$file = $name . '-system-info.txt';

		$now   = time();
		$stamp = __( 'Report Generated: ', 'system-info-report' ) . date( 'm-d-Y @ g:i:sa', $now ) . ' system time';
		$data  = '';
		$data  .= $stamp . "\n\n";
		$data  .= wp_strip_all_tags( $this->system_infos() );

		nocache_headers();
		header( 'Content-Type: text/plain' );
		header( 'Content-Disposition: attachment; filename="' . $file . '"' );

		echo $data;
		die;
	}

	/**
	 * Get system info
	 * @return      string $return A string containing the info to output
	 */
	public function system_infos() {
		global $wpdb;

		if ( ! class_exists( 'Browser' ) ) {
			require_once( $this->plugin_path . 'inc/Admin/Dashboard/browser.php' );
		}

		$browser      = new \Browser();
		$theme_data   = wp_get_theme();
		$theme        = $theme_data->Name . ' ' . $theme_data->Version;
		$parent_theme = $theme_data->Template;
		if ( ! empty( $parent_theme ) ) {
			$parent_theme_data = wp_get_theme( $parent_theme );
			$parent_theme      = $parent_theme_data->Name . ' ' . $parent_theme_data->Version;
		}

		$return = '### Begin System Infos (Generated ' . date( 'Y-m-d H:i:s' ) . ') ###' . "";
		$return .= "\n" . '======  SITE INFO ====== ' . "\n";
		$return .= 'Site URL:                 ' . site_url() . "\n";
		$return .= 'Home URL:                 ' . home_url() . "\n";
		$return .= 'Multisite:                ' . ( is_multisite() ? 'Yes' : 'No' ) . "\n";
		$return .= "\n\n" . '======  USER BROWSER ====== ' . "\n";
		$return .= $browser;

		$locale = get_locale();
		$return .= "\n\n" . '======  WORDPRESS CONFIG ====== ' . "\n";
		$return .= 'WP Version:               ' . get_bloginfo( 'version' ) . "\n";
		$return .= 'Language:                 ' . ( ! empty( $locale ) ? $locale : 'en_US' ) . "\n";
		$return .= 'Permalink Structure:      ' . ( get_option( 'permalink_structure' ) ? get_option( 'permalink_structure' ) : 'Default' ) . "\n";
		$return .= 'Active Theme:             ' . $theme . "\n";
		if ( $parent_theme !== $theme ) {
			$return .= 'Parent Theme:             ' . $parent_theme . "\n";
		}
		$return .= 'Show On Front:            ' . get_option( 'show_on_front' ) . "\n";
		if ( get_option( 'show_on_front' ) == 'page' ) {
			$front_page_id = get_option( 'page_on_front' );
			$blog_page_id  = get_option( 'page_for_posts' );

			$return .= 'Page On Front:            ' . ( $front_page_id != 0 ? get_the_title( $front_page_id ) . ' (#' . $front_page_id . ')' : 'Unset' ) . "\n";
			$return .= 'Page For Posts:           ' . ( $blog_page_id != 0 ? get_the_title( $blog_page_id ) . ' (#' . $blog_page_id . ')' : 'Unset' ) . "\n";
		}

		$return .= 'ABSPATH:                  ' . ABSPATH . "\n";

		$return .= 'WP_DEBUG:                 ' . ( defined( 'WP_DEBUG' ) ? WP_DEBUG ? 'Enabled' : 'Disabled' : 'Not set' ) . "\n";
		$return .= 'WP Memory Limit:          ' . ( $this->let_to_num( WP_MEMORY_LIMIT ) / ( 1024 ) ) . "MB" . "\n";
		$return .= "\n\n" . '======  LWWB WEBSITE BUILDER CONFIGURATION ====== ' . "\n";
		$return .= 'Version:                  ' . $this->version . "\n";

		$updates   = get_plugin_updates();
		$muplugins = get_mu_plugins();
		if ( count( $muplugins ) > 0 ) {
			$return .= "\n\n" . '======  MU PLUGINS ====== ' . "\n";

			foreach ( $muplugins as $plugin => $plugin_data ) {
				$return .= $plugin_data['Name'] . ': ' . $plugin_data['Version'] . "\n";
			}
		}
		$return .= "\n\n" . '======  WP ACTIVE PLUGINS ====== ' . "\n";

		$plugins        = get_plugins();
		$active_plugins = get_option( 'active_plugins', array() );

		foreach ( $plugins as $plugin_path => $plugin ) {
			if ( ! in_array( $plugin_path, $active_plugins ) ) {
				continue;
			}

			$update = ( array_key_exists( $plugin_path, $updates ) ) ? ' (needs update - ' . $updates[ $plugin_path ]->update->new_version . ')' : '';
			$return .= $plugin['Name'] . ': ' . $plugin['Version'] . $update . "\n";
		}
		$return .= "\n\n" . '======  WP INACTIVE PLUGINS' . "\n";

		foreach ( $plugins as $plugin_path => $plugin ) {
			if ( in_array( $plugin_path, $active_plugins ) ) {
				continue;
			}

			$update = ( array_key_exists( $plugin_path, $updates ) ) ? ' (needs update - ' . $updates[ $plugin_path ]->update->new_version . ')' : '';
			$return .= $plugin['Name'] . ': ' . $plugin['Version'] . $update . "\n";
		}

		if ( is_multisite() ) {
			$return .= "\n\n" . '======  NETWORK ACTIVE PLUGINS ====== ' . "\n";

			$plugins        = wp_get_active_network_plugins();
			$active_plugins = get_site_option( 'active_sitewide_plugins', array() );

			foreach ( $plugins as $plugin_path ) {
				$plugin_base = plugin_basename( $plugin_path );

				if ( ! array_key_exists( $plugin_base, $active_plugins ) ) {
					continue;
				}

				$update = ( array_key_exists( $plugin_path, $updates ) ) ? ' (needs update - ' . $updates[ $plugin_path ]->update->new_version . ')' : '';
				$plugin = get_plugin_data( $plugin_path );
				$return .= $plugin['Name'] . ': ' . $plugin['Version'] . $update . "\n";
			}
		}
		$return .= "\n\n" . '======  WEBSERVER CONFIG ====== ' . "\n";
		$return .= 'PHP Version:              ' . PHP_VERSION . "\n";
		$return .= 'MySQL Version:            ' . $wpdb->db_version() . "\n";
		$return .= 'Webserver Info:           ' . $_SERVER['SERVER_SOFTWARE'] . "\n";
		$return .= "\n\n" . '======  PHP CONFIG ======' . "\n";
		$return .= 'Memory Limit:             ' . ini_get( 'memory_limit' ) . "\n";
		$return .= 'Upload Max Size:          ' . ini_get( 'upload_max_filesize' ) . "\n";
		$return .= 'Post Max Size:            ' . ini_get( 'post_max_size' ) . "\n";
		$return .= 'Upload Max Filesize:      ' . ini_get( 'upload_max_filesize' ) . "\n";
		$return .= 'Time Limit:               ' . ini_get( 'max_execution_time' ) . "\n";
		$return .= 'Max Input Vars:           ' . ini_get( 'max_input_vars' ) . "\n";
		$return .= 'Display Errors:           ' . ( ini_get( 'display_errors' ) ? 'On (' . ini_get( 'display_errors' ) . ')' : 'N/A' ) . "\n";
		$return .= 'PHP Arg Separator:        ' . ini_get( 'arg_separator.output' ) . "\n";
		$return .= 'PHP Allow URL File Open:  ' . ini_get( 'allow_url_fopen' ) . "\n";

		$return .= "\n\n" . '### End System Infos ###';

		return $return;
	}

	/**
	 * Does Size Conversions
	 */
	public function let_to_num( $v ) {
		$l   = substr( $v, - 1 );
		$ret = substr( $v, 0, - 1 );

		switch ( strtoupper( $l ) ) {
			case 'P': // fall-through
			case 'T': // fall-through
			case 'G': // fall-through
			case 'M': // fall-through
			case 'K': // fall-through
				$ret *= 1024;
				break;
			default:
				break;
		}

		return $ret;
	}
}